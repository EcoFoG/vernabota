use_mit_license()
library(vernabota)
library(vernabota)
devtools::use_package("data.table")
usethis::use_package("data.table")
utils::globalVariables(c(":=", "!!"))
utils::globalVariables(c(":=")
)
library(vernabota)
?PrepData
?SDcols
library(data.table)
?SDcols
usethis::use_package("data.table")
?dcast
?.
?setorder
usethis::use_package("gtools")
?rmultinom
?rmultinom
usethis::use_package("stats")
?.SDCols
?.SDcols
?.SDcols
library(data.table)
?.SDcols
??.SDcols
library(vernabota)
library(vernabota)
?entropart::MetaCommunity
library(vernabota)
?CreateAlpha
usethis usethis::use_package("ggplot2")
usethis::use_package("ggplot2")
?methods
usethis::use_package("methods")
?setClass
?new
library(vernabota)
EcoFoG::Guyafor2df(
WHERE = "Forest='Paracou' AND Plot='6' AND CensusYear=2016",
UID = NULL,PWD = NULL,Driver = "SQL Server Native Client 10.0")
load("data/Paracou6_2016.rdata")
str(Paracou6_2016)
Paracou6_2016 <- Paracou6_2016[,-c(-TreeFieldNum,-Project, -idVern, -CommercialSp, -CensusDate)]
#'   \item{CorrCode}{Information on the reason why and how the circumference has
#'   been corrected, multiple values are possible(character)}
#'   ...
#' }
#' @source \url{http://paracou.cirad.fr ;
#' https://paracoudata.cirad.fr/public/pdf/Paracou_data_dictionnary.pdf}
#'
#' Paracou6_2016 <- EcoFoG::Guyafor2df(
#' WHERE = "Forest='Paracou' AND Plot='6' AND CensusYear=2016",
#' UID = NULL,PWD = NULL,Driver = "SQL Server Native Client 10.0")
Paracou6_2016 <- Paracou6_2016[,-c(Paracou6_2016$TreeFieldNum,Paracou6_2016$Project,
Paracou6_2016$idVern, Paracou6_2016$CommercialSp, Paracou6_2016$CensusDate)]
#'   \item{CorrCode}{Information on the reason why and how the circumference has
#'   been corrected, multiple values are possible(character)}
#'   ...
#' }
#' @source \url{http://paracou.cirad.fr ;
#' https://paracoudata.cirad.fr/public/pdf/Paracou_data_dictionnary.pdf}
#'
#' Paracou6_2016 <- EcoFoG::Guyafor2df(
#' WHERE = "Forest='Paracou' AND Plot='6' AND CensusYear=2016",
#' UID = NULL,PWD = NULL,Driver = "SQL Server Native Client 10.0")
Paracou6_2016 <- Paracou6_2016[,-c(Paracou6_2016$TreeFieldNum,Paracou6_2016$Project, Paracou6_2016$idVern, Paracou6_2016$CommercialSp, Paracou6_2016$CensusDate)]
str(Paracou6_2016)
Paracou6_2016 <- EcoFoG::Guyafor2df(
WHERE = "Forest='Paracou' AND Plot='6' AND CensusYear=2016",
UID = NULL,PWD = NULL,Driver = "SQL Server Native Client 10.0")
#'   in cm (numeric)}
#'   \item{CircCorr}{Corrected circumference
#'   (mathematical correction of abnormal circumferences), in cm (numeric)}
#'   \item{CorrCode}{Information on the reason why and how the circumference has
#'   been corrected, multiple values are possible(character)}
#'   ...
#' }
#' @source \url{http://paracou.cirad.fr ;
#' https://paracoudata.cirad.fr/public/pdf/Paracou_data_dictionnary.pdf}
#'
Paracou6_2016 <- EcoFoG::Guyafor2df(
WHERE = "Forest='Paracou' AND Plot='6' AND CensusYear=2016")
library(EcoFoG)
?Guyafor2df
Guyafor2df(WHERE="Forest='Paracou' AND Plot='6' AND CensusYear=2016")
Guyafor2df()
str(Paracou6_2016)
#' dplyr::select(-TreeFieldNum,-Project, -idVern, -CommercialSp, -CensusDate)
#'
Paracou6_2016[,-(25,18,19),drop=FALSE]
#' dplyr::select(-TreeFieldNum,-Project, -idVern, -CommercialSp, -CensusDate)
#'
Paracou6_2016[,-c(5,18,19),drop=FALSE]
#' dplyr::select(-TreeFieldNum,-Project, -idVern, -CommercialSp, -CensusDate)
#'
Paracou6_2016 <- Paracou6_2016[,-c(5,18,19),drop=FALSE]
str(Paracou6_2016)
Paracou6_2016[,17]
colnames(Paracou6_2016)[17])
colnames(Paracou6_2016)[17]
Paracou6_2016 <- Paracou6_2016[,-17,drop=FALSE]
str(Paracou6_2016)
save(Paracou6_2016, file="data/Paracou6_2016.rdata")
load("data/Paracou6_2016.rdata")
str(Paracou6_2016)
colnames(Paracou6_2016)[5,18,20]
colnames(Paracou6_2016)[c(5,18,20)]
#' dplyr::select(-TreeFieldNum,-Project, -idVern, -CommercialSp, -CensusDate)
#'
Paracou6_2016 <- Paracou6_2016[,-c(5,18,20),drop=FALSE]
str(Paracou6_2016)
save(Paracou6_2016, file="data/Paracou6_2016.rdata")
load("data/Paracou6_2016.rdata")
str(Paracou6_2016)
utils::globalVariables(names(Paracou6_2016))
utils::globalVariables(names(Paracou6_2016))
colnames(Paracou6_2016)
library(vernabota)
?`vernabota-package`
utils::globalVariables(c("Forest", "Plot","PlotArea","SubPlot","idTree","Xfield",
"Yfield", "Xutm" ,"Yutm","Lat","Lon","Family",
"Genus", "Species","BotaSource","BotaCertainty","VernName","CensusYear",
,"CensusDate","CensusDateCertainty", "CodeAlive",,"MeasCode","Circ",
"CircCorr" , "CorrCode"))
?grpl
?grpl
?grepl
Paracou6_2016[grep("dehors", Paracou6_2016$VernName),]
Paracou6_2016[grep("dehors", Paracou6_2016$VernName),VernName] <- "coeur dehors"
Paracou6_2016[grep("dehors", Paracou6_2016$VernName),"VernName"] <- "coeur dehors"
Paracou6_2016[grep("dehors", Paracou6_2016$VernName),]
save(Paracou6_2016, file="data/Paracou6_2016.rdata")
library(vernabota)
?vernabota
usethis::use_vignette("Using vernabota")
usethis::use_vignette("Using_vernabota")
?entropart
data(Paracou6_2016)
table(Paracou6_2016$SubPlot)
library(vernabota)
Data2fill <- Paracou6_2016[Paracou6_2016$SubPlot==1,]
str(Data2fill)
Paracou6_2016 <- data(Paracou6_2016)
Data2fill <- Paracou6_2016[Paracou6_2016$SubPlot==1,]
str(Paracou6_2016)
Paracou6_2016 <- data(Paracou6_2016)
data(Paracou6_2016)
Data2fill <- Paracou6_2016[Paracou6_2016$SubPlot==1,]
Data2fill <- PrepData(Data2fill)
str(Data2fill)
install.packages("qpdf")
library(qpdf)
devtools::install_github(build_ vignettes = TRUE)
devtools::install_github(build_vignettes = TRUE)
?devtools::install_github
devtools::install_github(build_vignettes = TRUE, repo="EcoFoG/vernabota")
R.Version()
D:/my_R_remote/vernabota/Package/vernabota.Rcheck/00check.log
library(vernabota)
library(vernabota)
devtools::build(build_args = c('--compact-vignettes=both'))
R.version
library(vernabota)
?SimFullCom
?CompareSim
devtools::build_vignettes()
devtools::build_vignettes()
?PrepData
library(vernabota)
?PrepData
utils::globalVariables(PresentInGuyaFor)
utils::globalVariables("PresentInGuyaFor")
library(vernabota)
?PrepPrior
load("D:/my_R_remote/vernabota/Package/vernabota/data/PriorAllFG_20220126.RData")
str(PriorAllFG_20220126)
load("D:/my_R_remote/vernabota/Package/vernabota/data/PriorParacouNew_20220126.RData")
str(PriorParacouNew_20220126)
load("D:/my_R_remote/vernabota/Package/vernabota/data/PriorParacouOld_20220126.RData")
str(PriorParacouOld_20220126)
library(vernabota)
?PriorAllFG_20220126
library(vernabota)
?PriorAllFG_20220126
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
library(vernabota)
?SimFullCom
?CompareSim
?CompareSim
library(vernabota)
Param <- data.frame(priors = c(1,1,2,1,1),  # here, we used the first prior
# of the list for scenario 1, 2, 4 and 5 and the seccond for scenario 3
dataFill = c(1,1,1,1,1),
dataAsso = c(2,1,2,2,2), # for the second scenario dataAsso is NULL (the data to gapfill are used)
weights = c(0.5,0.5,0.5,0.2,0.8),
NbSim = c(5,5,5,5,5),
pc2fill = c(10,10,10,10,10),
pcFamilyDet = c(25,25,25,25,25),
pcGenusDet = c(25,25,25,25,25),
eps = c(0.01,0.01,0.01,0.01,0.01),
Determ = c(FALSE,FALSE,FALSE,FALSE,FALSE),
Results_Simulations = c(FALSE,FALSE,FALSE,FALSE,FALSE))
Param
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::include_graphics("flowchart.png")
library(vernabota)
set.seed(56)
data(Paracou6_2016)
Data2fill <- Paracou6_2016[Paracou6_2016$SubPlot==1,]
Data2fill <- PrepData(Data2fill)
str(Data2fill)
data(PriorAllFG_20220126)
PriorAllFG <- PriorAllFG_20220126
str(PriorAllFG[,1:10])
data(PriorParacouNew_20220126)
PriorParacouNew <- PriorParacouNew_20220126
# str(PriorParacouNew[,1:10])
# data(PriorParacouOld_20220126)
# PriorParacouOld <- PriorParacouOld_20220126
# str(PriorParacouOld[,1:10])
PriorAllFG <- PrepPrior(PriorAllFG)
str(PriorAllFG[,1:10])
PriorParacouNew <- PrepPrior(PriorParacouNew)
# str(PriorParacouNew[,1:10])
#
# PriorParacouOld <- PrepPrior(PriorParacouOld)
# str(PriorParacouOld[,1:10])
DataAsso <- Paracou6_2016
DataAsso <- PrepData(DataAsso)
str(DataAsso)
DataNSim <- SimFullCom(Data2fill, NSim=2, eps=0.01)
str(DataNSim, max.level = 1)
colnames(DataNSim[[1]])
table(DataNSim[[1]]$BotaCorCode)
DataNSim <- SimFullCom(Data2fill=Data2fill, DataAsso=DataAsso,
prior=PriorAllFG, wp=0.2, NSim=2, eps=0.01)
#str(DataNSim, max.level = 1)
#colnames(DataNSim[[1]])
table(DataNSim[[1]]$BotaCorCode)
DataNSim <- SimFullCom(Data2fill=Data2fill, DataAsso=DataAsso,
prior=PriorAllFG, wp=0.2, NSim=1, eps=0.01, Determ=TRUE)
#str(DataNSim, max.level = 1)
#colnames(DataNSim[[1]])
table(DataNSim[[1]]$BotaCorCode)
D2fill <- list(Data2fill)                   # data to gapfill
priors <- list(PriorAllFG, PriorParacouNew) # priors
DAsso <- list(NULL, DataAsso)               # observation data
Param <- data.frame(priors = c(1,1,2,1,1),  # here, we used the first prior
# of the list for scenario 1, 2, 4 and 5 and the seccond for scenario 3
dataFill = c(1,1,1,1,1),
dataAsso = c(2,1,2,2,2), # for the second scenario dataAsso is NULL (the data to gapfill are used)
weights = c(0.5,0.5,0.5,0.2,0.8),
NbSim = c(5,5,5,5,5),
pc2fill = c(10,10,10,10,10),
pcFamilyDet = c(25,25,25,25,25),
pcGenusDet = c(25,25,25,25,25),
eps = c(0.01,0.01,0.01,0.01,0.01),
Determ = c(FALSE,FALSE,FALSE,FALSE,FALSE),
Results_Simulations = c(FALSE,FALSE,FALSE,FALSE,FALSE))
Param
VBS_test <- CompareSim(Param = Param ,
priors = priors, D2fill = D2fill, DAsso = DAsso)
summary(VBS_test)
plot(VBS_test)
?VBS_test
str(VBS_test)
?VernaBotaSims
?plot.VernaBotaSims
?lm
summary.lm
?summary.lm
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
Param <- data.frame(priors = c(2,2,2),  # here, we used the first prior
# of the list for scenario 1, 2, 4 and 5 and the seccond for scenario 3
dataFill = c(1,1,1),
dataAsso = c(2,2,2), # for the second scenario dataAsso is NULL (the data to gapfill are used)
weights = c(0.5,0.5,0.5),
NbSim = c(10,10,10),
pc2fill = c(10,10,10),
pcFamilyDet = c(25,25,25),
pcGenusDet = c(25,25,25),
eps = c(0.01,0.01,0.01),
Determ = c(FALSE,FALSE,FALSE),
Results_Simulations = c(FALSE,FALSE,FALSE))
Param
devtools::build_vignettes()
?SimFullCom
devtools::build_vignettes()
devtools::build_vignettes()
?SimFullCom
?VernaBotaSims
Param <- data.frame(priors = c(2),
dataFill = c(1),
dataAsso = c(2),
weights = c(0.5),
NbSim = c(10),
pc2fill = c(10),
pcFamilyDet = c(25),
pcGenusDet = c(25),
eps = c(0.01),
Determ = c(FALSE),
Results_Simulations = c(TRUE))
Param
Param <- data.frame(priors = c(2),
dataFill = c(1),
dataAsso = c(2),
weights = c(0.5),
NbSim = c(10),
pc2fill = c(10),
pcFamilyDet = c(25),
pcGenusDet = c(25),
eps = c(0.01),
Determ = c(FALSE),
Results_Simulations = c(TRUE))
Param
VBS_test <- CompareSim(Param = Param ,
priors = priors, D2fill = D2fill, DAsso = DAsso)
VBS_test
VBS_test@results
VBS_test@results[[2]]
VBS_test@results[[1]]
VBS_test@results[[1]][[2]]
Res2 <- str(VBS_test@results[[1]][[2]]) # here we retreive the second simulation of scenario 1.
Res2 <- VBS_test@results[[1]][[2]] # here we retreive the second simulation of scenario 1.
str(Res2)
VBS_test <- CompareSim(Param = Param ,
priors = priors, D2fill = D2fill, DAsso = DAsso)
Res2 <- VBS_test@results[[1]][[2]] # here we retreive the second simulation of scenario 1.
str(Res2)
devtools::build_vignettes()
devtools::build_vignettes()
Param <- data.frame(priors = c(2),
dataFill = c(1),
dataAsso = c(2),
weights = c(0.5),
NbSim = c(10),
pc2fill = c(10),
pcFamilyDet = c(25),
pcGenusDet = c(25),
eps = c(0.01),
Determ = c(FALSE),
Results_Simulations = c(TRUE))
Param
VBS_test <- CompareSim(Param = Param ,
priors = priors, D2fill = D2fill, DAsso = DAsso)
Res2 <- VBS_test@results[[1]][[2]] # here we retreive the second simulation of scenario 1.
str(Res2)
library(vernabota)
library(vernabota)
VBS_test <- CompareSim(Param = Param ,
priors = priors, D2fill = D2fill, DAsso = DAsso)
Res2 <- VBS_test@results[[1]][[2]] # here we retreive the second simulation of scenario 1.
str(Res2)
?ValidTaxo
dim(unique(Res2[,idTree]))
length(unique(Res2$idTree))
D2fill <- list(DataAsso)
D2fill[[1]]
D2fill <- list(rbind(Data2fill, Data2fill)
)
D2fill[[1]]
976*2
priors <- list(PriorAllFG, PriorParacouNew) # priors
DAsso <- list(NULL, DataAsso)               # observation data
Param <- data.frame(priors = c(2),
dataFill = c(1),
dataAsso = c(2),
weights = c(0.5),
NbSim = c(10),
pc2fill = c(10),
pcFamilyDet = c(25),
pcGenusDet = c(25),
eps = c(0.01),
Determ = c(FALSE),
Results_Simulations = c(TRUE))
Param
VBS_test <- CompareSim(Param = Param ,
priors = priors, D2fill = D2fill, DAsso = DAsso)
Res2 <- VBS_test@results[[1]][[2]] # here we retreive the second simulation of scenario 1.
str(Res2)
DT1 = data.table(A=1:3,B=letters[1:3])
DT2 = data.table(A=4:5,B=letters[4:5])
l = list(DT1,DT2)
rbindlist(l
library(data.table)
library(data.table)
DT1 = data.table(A=1:3,B=letters[1:3])
DT2 = data.table(A=4:5,B=letters[4:5])
l = list(DT1,DT2)
rbindlist(l
)
DT1
DT2
DT1 = data.table(A=1:3,B=letters[1:3])
DT2 = data.table(A=4:5,B=letters[4:5])
l = list(DT1,DT2
fde
VBS_test@results[[1]]
dim(Res)
ResL <- VBS_test@results[[1]] # here we all the simulation of scenario 1
dim(ResL)
length(ResL)
length(ResL[[1]])
dim(ResL[[1]])
Res <- rbindlist(ResL)
Res
Res[,.N, by=.(idTree,ValidAsso)]
Res[idTree==101637]
Res[idTree==100747]
Res[idTree==100621]
Res[ValidAsso==TRUE,.N, by=idTree]
ResL[[1]]
unique(ResL[[1]]$idTree)
unique(Res2tested$idTree)
976*0.1
Res[TestData==TRUE & ValidAsso==TRUE,.N, by=idTree]
dim(ResL)
length(ResL)
Res[TestData==TRUE & ValidAsso==TRUE,.N/length(ResL), by=idTree]
Res[TestData==TRUE & ValidAsso==TRUE,.N/length(ResL), by=idTree]
# we calculate the percentage of good association for each tested tree
PropGood <- Res[TestData==TRUE & ValidAsso==TRUE,.N/length(ResL), by=idTree]
head(PropGood)
# we calculate the percentage of good association for each tested tree
PropGood <- Res[TestData==TRUE & ValidAsso==TRUE,
.(propOK=.N/length(ResL)),
by=idTree]
head(PropGood)
devtools::build_vignettes()
head(ResL[[1]]) # first simulation
devtools::build_vignettes()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(vernabota)
set.seed(56)
data(Paracou6_2016)
Data2fill <- Paracou6_2016[Paracou6_2016$SubPlot==1,]
Data2fill <- PrepData(Data2fill)
str(Data2fill)
data(PriorAllFG_20220126)
PriorAllFG <- PriorAllFG_20220126
str(PriorAllFG[,1:10])
data(PriorParacouNew_20220126)
PriorParacouNew <- PriorParacouNew_20220126
# str(PriorParacouNew[,1:10])
# data(PriorParacouOld_20220126)
# PriorParacouOld <- PriorParacouOld_20220126
# str(PriorParacouOld[,1:10])
PriorAllFG <- PrepPrior(PriorAllFG)
str(PriorAllFG[,1:10])
PriorParacouNew <- PrepPrior(PriorParacouNew)
# str(PriorParacouNew[,1:10])
#
# PriorParacouOld <- PrepPrior(PriorParacouOld)
# str(PriorParacouOld[,1:10])
DataAsso <- Paracou6_2016
DataAsso <- PrepData(DataAsso)
str(DataAsso)
D2fill <- list(Data2fill)                   # data to gapfill
priors <- list(PriorAllFG, PriorParacouNew) # priors
DAsso <- list(NULL, DataAsso)               # observation data
Param <- data.frame(priors = c(2),
dataFill = c(1),
dataAsso = c(2),
weights = c(0.5),
NbSim = c(10),
pc2fill = c(10),
pcFamilyDet = c(25),
pcGenusDet = c(25),
eps = c(0.01),
Determ = c(FALSE),
Results_Simulations = c(TRUE))
Param
VBS_test <- CompareSim(Param = Param ,
priors = priors, D2fill = D2fill, DAsso = DAsso)
ResL <- VBS_test@results[[1]] # here we get all the simulation of scenario 1
str(ResL[[1]]) # first simulation
Res <- rbindlist(ResL) # combine them in a single data.table
# calculate the percentage of good association for each tested tree
PropGood <- Res[TestData==TRUE & ValidAsso==TRUE,
.(propOK=.N/length(ResL)),
by=idTree]
head(PropGood)
.Last.error.trace
devtools::build_vignettes()
